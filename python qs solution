# 1. Write a program that takes a user's name and age as input and prints a Hello World! message that includes their name and age.
'''
x=str(input("ENTER NAME:"))
y=int(input("ENTER AGE:"))
print("HELLO WORLD!" , x ,"age:" , y)
'''
#2.Create a program that swaps the values of two variables without using a third variable.
'''
x=2
y=3
print(x,y)
print(y,x)
'''
#3.Create a program that prints the first 10 numbers of the Fibonacci sequence.
'''
fib= []
a, b = 0, 1
while len(fib) < 10:
    fib.append(a)
    a, b = b, a + b


for x in fib:
    print(x)
'''
#4.Create a function that checks if a given string is a palindrome.
"""
a=str(input("ibput string here:"))
z=a[::-1]
if a==z:
    print("palindrome")
else:
    print("not palindrome")
"""
#5.Create a program that removes duplicate elements from a list.
'''
z=set()
w=[]
n=int(input("NUMBER OF ELEMENTS:"))
i=0
    
for i in range(n):
    x=int(input("INPUT ELEMENT"))
    w.append(x)
    z.add(x)
print("ORIGINAL LIST")
print(w)
print("AFTER REMOVING DUPLICATES")
print("[",end="")
for i in z:
    print(i,",",end="")

print("]")
'''
#6.Write a class representing a simple bank account with methods to deposit, withdraw, and check balance.
'''
class simplebankaccount:
    def __init__(self):
        self.amount=0
        
    def deposit(self,a):
        self.amount=self.amount+a
        print("AMOUNT DEPOSITED")

    def withdraw(self,w):
        if self.amount>=w:
            self.amount=self.amount-w
            print("AMOUNT WITHDRAWN")
        else:
            print("INSUFFICIENT BALANCE")
    def checkbalance(self):
        print("BALANCE:",self.amount)
        
account = simplebankaccount()
x = int(input("AMOUNT TO BE DEPOSITED: "))
account.deposit(x)
y = int(input("AMOUNT TO BE WITHDRAWN: "))
account.withdraw(y)
account.checkbalance()
'''
#7.Write a code to list all the odd numbers from a list of numbers using boolean indexing.
nums= np.arange(10)
print(nums)
odd_nums= nums[nums%2==1]
print(odd_nums)

a=np.array([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]])
print(a)
# We will extract the last two rows and the first two columns using slicing.
b1 = a[0:,:2] #row 1 to the last row, and the first 2 columns
print(b1)
#With negative indexing
b2= a[-3:,-5:-3]
print(b2)
b3=a[2:,:] # row 2 onwards and all columns.
print(b3)
print(b3.shape) # Here the result is rank 2. # Rank is simply the number of dimensions(or axes) an array has
b4=a[2,:]
print(b4)
print(b4.shape)
'''
#8.Write a program that creates a 3x3 matrix with values ranging from 1 to 9. Then, modify the matrix by doubling the values of the second row.
'''
import numpy as np
matrix = np.arange(1, 10).reshape(3, 3)
print(matrix)
matrix[1, :] = matrix[1, :] * 2
print(matrix)
'''
#9.HANGMAN
"""
import random

def random_word():
    list_of_words = ["water", "cheating", "pure", "wife"]
    word = random.choice(list_of_words)
    return word.upper()

def display_hangman(tries):
    stages = [
        """
           ------------
           |           |
           |           o
           |         \\|/
           |           |
           |          / \\
           `
        """,
        """
           ------------
           |           |
           |           o
           |         \\|/
           |           |
           |          / 
           `
        """,
        """
           ------------
           |           |
           |           o
           |         \\|/
           |           |
           |          
           `
        """,
        """
           ------------
           |           |
           |           o
           |         \\|
           |           |
           |          
           `
        """,
        """
           ------------
           |           |
           |           o
           |           |
           |           |
           |           
           `
        """,
        """
           ------------
           |           |
           |           o
           |         
           |          
           |          
           `
        """,
        """
           ------------
           |           |
           |           
           |         
           |         
           |          
           `
        """
    ]
    return stages[tries]

def hangman(word):
    word_completion = "_" * len(word)
    guessed = False
    guessed_letters = []
    guessed_words = []
    tries = 6
    print("LET'S PLAY HANGMAN!")
    print(display_hangman(tries))
    print(word_completion)
    print("\n")
    while not guessed and tries > 0:
        guess = input("GUESS A LETTER OR A WORD: ").upper()
        if len(guess) == 1 and guess.isalpha():
            if guess in guessed_letters:
                print("You already guessed the letter", guess)
            elif guess not in word:
                print(guess, "is not in the word.")
                tries -= 1
                guessed_letters.append(guess)
            else:
                print(guess, "is in the word!")
                guessed_letters.append(guess)
                word_as_list = list(word_completion)
                indices = [i for i, letter in enumerate(word) if letter == guess]
                for index in indices:
                    word_as_list[index] = guess
                word_completion = "".join(word_as_list)
                if "_" not in word_completion:
                    guessed = True
        elif len(guess) == len(word) and guess.isalpha():
            if guess in guessed_words:
                print("You already guessed the word", guess)
            elif guess != word:
                print(guess, "is not the word.")
                tries -= 1
                guessed_words.append(guess)
            else:
                guessed = True
                word_completion = word
        else:
            print("Not a valid guess.")
        print(display_hangman(tries))
        print(word_completion)
        print("\n")
    if guessed:
        print("Congrats, you guessed the word! You win!")
    else:
        print("Sorry, you ran out of tries. The word was " + word + ". Maybe next time!")

def main():
    word = random_word()
    hangman(word)
    while input("Play Again? (Y/N) ").upper() == "Y":
        word = random_word()
        hangman(word)

if __name__ == "__main__":
    main()
"""
